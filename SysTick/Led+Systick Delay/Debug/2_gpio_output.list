
2_gpio_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000480  08000488  00010488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  00010488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000000  08000488  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400001c  08000488  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000075a  00000000  00000000  000104b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000217  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000068  00000000  00000000  00010e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000040  00000000  00000000  00010e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000237e3  00000000  00000000  00010ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000a06  00000000  00000000  000346b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ce24e  00000000  00000000  000350b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00103307  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000090  00000000  00000000  0010335c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000468 	.word	0x08000468

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	08000468 	.word	0x08000468

0800030c <systickDelayMs>:
#include "stm32h723xx.h"

#define SYSTICK_LOAD_VAL 		64000 //Number of clock cycles per ms


void systickDelayMs (int delay){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	//Reload with nuble of clock cycles per ms
	SysTick->LOAD = (uint32_t) SYSTICK_LOAD_VAL;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <systickDelayMs+0x50>)
 8000316:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800031a:	605a      	str	r2, [r3, #4]
	//Clear SysTick current value register
	SysTick->VAL = 0;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <systickDelayMs+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
	//Enable Systick and select internal Clk source
	SysTick->CTRL = ((1U<<0) | (1U<<2));
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <systickDelayMs+0x50>)
 8000324:	2205      	movs	r2, #5
 8000326:	601a      	str	r2, [r3, #0]

	for (int i= 0 ; i< delay ; i++)
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	e009      	b.n	8000342 <systickDelayMs+0x36>
	{
		//Wait until the counterflag is set
		while ( !((SysTick->CTRL) & (1U << 16))){}
 800032e:	bf00      	nop
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <systickDelayMs+0x50>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0f9      	beq.n	8000330 <systickDelayMs+0x24>
	for (int i= 0 ; i< delay ; i++)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3301      	adds	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	429a      	cmp	r2, r3
 8000348:	dbf1      	blt.n	800032e <systickDelayMs+0x22>

	}
SysTick->CTRL = 0;
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <systickDelayMs+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]

}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000e010 	.word	0xe000e010

08000360 <main>:
#define PIN3_R				(1U<<14)

#define LED_PIN_G 			PIN0_G
#define LED_PIN_R 			PIN3_R

int main (void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
RCC->AHB4ENR|=GPIOB_EN;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0x60>)
 8000366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <main+0x60>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
RCC->AHB4ENR|=GPIOE_EN;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <main+0x60>)
 8000376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037a:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <main+0x60>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

GPIOE->MODER &=~(1U<<3);
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <main+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <main+0x64>)
 800038a:	f023 0308 	bic.w	r3, r3, #8
 800038e:	6013      	str	r3, [r2, #0]
GPIOB->MODER &=~(1U<<1);
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <main+0x68>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <main+0x68>)
 8000396:	f023 0302 	bic.w	r3, r3, #2
 800039a:	6013      	str	r3, [r2, #0]
GPIOB->MODER &=~(1U<<29);
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <main+0x68>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <main+0x68>)
 80003a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003a6:	6013      	str	r3, [r2, #0]
while (1){
	GPIOB->ODR ^=LED_PIN_R;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <main+0x68>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <main+0x68>)
 80003ae:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80003b2:	6153      	str	r3, [r2, #20]
	systickDelayMs (4000);
 80003b4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80003b8:	f7ff ffa8 	bl	800030c <systickDelayMs>
	GPIOB->ODR ^=LED_PIN_R;
 80003bc:	e7f4      	b.n	80003a8 <main+0x48>
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	58021000 	.word	0x58021000
 80003c8:	58020400 	.word	0x58020400

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ffaf 	bl	8000360 <main>

08000402 <LoopForever>:

LoopForever:
    b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000408:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800040c:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000410:	08000488 	.word	0x08000488
  ldr r2, =_sbss
 8000414:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000418:	2400001c 	.word	0x2400001c

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	; (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	; (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	; (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	; (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000480 	.word	0x08000480
 800045c:	08000480 	.word	0x08000480
 8000460:	08000480 	.word	0x08000480
 8000464:	08000484 	.word	0x08000484

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
