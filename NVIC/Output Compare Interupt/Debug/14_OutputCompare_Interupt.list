
14_OutputCompare_Interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000564  0800056c  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000000  0800056c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  0800056c  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0001056c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000017fb  00000000  00000000  0001059a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000369  00000000  00000000  00011d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000080  00000000  00000000  00012100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000058  00000000  00000000  00012180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00000edd  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000c54  00000000  00000000  000130b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d2d02  00000000  00000000  00013d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000e6a0b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000ec  00000000  00000000  000e6a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800054c 	.word	0x0800054c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	0800054c 	.word	0x0800054c

0800030c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800031a:	2b00      	cmp	r3, #0
 800031c:	db0b      	blt.n	8000336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	f003 021f 	and.w	r2, r3, #31
 8000324:	4907      	ldr	r1, [pc, #28]	; (8000344 <__NVIC_EnableIRQ+0x38>)
 8000326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800032a:	095b      	lsrs	r3, r3, #5
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e100 	.word	0xe000e100

08000348 <tim2_05HZ_interrupt_init>:
#include "stm32h723xx.h"


void tim2_05HZ_interrupt_init (void)
	{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
		/*Enable clock access to tim2 */
		RCC->APB1LENR |= (1U << 0);
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <tim2_05HZ_interrupt_init+0x64>)
 800034e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000352:	4a16      	ldr	r2, [pc, #88]	; (80003ac <tim2_05HZ_interrupt_init+0x64>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

		/*Clear Counter*/
		TIM2->CNT = 0;
 800035c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
		/*Set auto-reload value*/
		TIM2->ARR = (uint16_t) 39999;
 8000364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000368:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800036c:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Set prescaler value*/
		TIM2->PSC = (uint16_t) 6249;
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	f641 0269 	movw	r2, #6249	; 0x1869
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
		/*Set auto-reload value*/
		TIM2->ARR = (uint16_t) 39999;
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Enable Timer*/
		TIM2->CR1 |= (1U << 0);
 8000382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]

		/*Enable TIM interrupt*/
		TIM2->DIER |= (1U << 0);
 8000392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	60d3      	str	r3, [r2, #12]
		/*Enable TIM interrupt in NVIC*/
		NVIC_EnableIRQ(TIM2_IRQn);
 80003a2:	201c      	movs	r0, #28
 80003a4:	f7ff ffb2 	bl	800030c <__NVIC_EnableIRQ>
	}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	58024400 	.word	0x58024400

080003b0 <tim3_PB0_Toggle>:

void tim3_PB0_Toggle (void)
	{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

		/*Enable clock access to PB0 */
		RCC->AHB4ENR|= (1U << 1);
 80003b4:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <tim3_PB0_Toggle+0xb8>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a2b      	ldr	r2, [pc, #172]	; (8000468 <tim3_PB0_Toggle+0xb8>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

		/*Set PB0 mode to alternate function mode*/
		GPIOB->MODER |= (1U << 1);
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a28      	ldr	r2, [pc, #160]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	6013      	str	r3, [r2, #0]
		GPIOB->MODER &=~ (1U << 0);
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a25      	ldr	r2, [pc, #148]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003d6:	f023 0301 	bic.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]

		/*Set Alternate function type to AF2 */
		GPIOB->AFR[0] |= (1U << 1);
 80003dc:	4b23      	ldr	r3, [pc, #140]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a22      	ldr	r2, [pc, #136]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	6213      	str	r3, [r2, #32]
		GPIOB->AFR[0] &=~ (1U << 0);
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003ea:	6a1b      	ldr	r3, [r3, #32]
 80003ec:	4a1f      	ldr	r2, [pc, #124]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	6213      	str	r3, [r2, #32]
		GPIOB->AFR[0] &=~ (1U << 2);
 80003f4:	4b1d      	ldr	r3, [pc, #116]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003f6:	6a1b      	ldr	r3, [r3, #32]
 80003f8:	4a1c      	ldr	r2, [pc, #112]	; (800046c <tim3_PB0_Toggle+0xbc>)
 80003fa:	f023 0304 	bic.w	r3, r3, #4
 80003fe:	6213      	str	r3, [r2, #32]
		GPIOB->AFR[0] &=~ (1U << 3);
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <tim3_PB0_Toggle+0xbc>)
 8000402:	6a1b      	ldr	r3, [r3, #32]
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <tim3_PB0_Toggle+0xbc>)
 8000406:	f023 0308 	bic.w	r3, r3, #8
 800040a:	6213      	str	r3, [r2, #32]

		/*Enable clock access to tim3 */
		RCC->APB1LENR |= (1U << 1);
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <tim3_PB0_Toggle+0xb8>)
 800040e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <tim3_PB0_Toggle+0xb8>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

		/*Set auto-reload value*/
		TIM3->ARR = (uint16_t) 39999;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 800041e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Set prescaler value*/
		TIM3->PSC = (uint16_t) 6249;
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 8000426:	f641 0269 	movw	r2, #6249	; 0x1869
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
		/*Set auto-reload value*/
		TIM3->ARR = (uint16_t) 39999;
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 800042e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000432:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Set Output Compare toggle mode*/
		TIM3->CCMR2 |= (1U << 4) | (1U << 5);
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 800043a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800043e:	61d3      	str	r3, [r2, #28]
		//TIM3->CCMR2 &=~ (1U << 6) | (1U << 16);

		/*Enable tim3 ch1 in compare mode*/
		TIM3->CCER |= (1U << 8);
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 8000446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800044a:	6213      	str	r3, [r2, #32]

		/*Clear Counter*/
		TIM3->CNT = 0;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24

		/*Enable Timer*/
		TIM3->CR1 |= (1U << 0);
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a06      	ldr	r2, [pc, #24]	; (8000470 <tim3_PB0_Toggle+0xc0>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6013      	str	r3, [r2, #0]
	}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	58024400 	.word	0x58024400
 800046c:	58020400 	.word	0x58020400
 8000470:	40000400 	.word	0x40000400

08000474 <main>:
int i =0;
uint32_t ARR;
uint32_t PSC;

int main (void)
	{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

		tim2_05HZ_interrupt_init();
 8000478:	f7ff ff66 	bl	8000348 <tim2_05HZ_interrupt_init>
		tim3_PB0_Toggle();
 800047c:	f7ff ff98 	bl	80003b0 <tim3_PB0_Toggle>


		while (1)
 8000480:	e7fe      	b.n	8000480 <main+0xc>
	...

08000484 <TIM2_IRQHandler>:
		{
		}
}

void TIM2_IRQHandler(void) {
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
								TIM2->SR &=~ (1U << 0);
 8000488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6113      	str	r3, [r2, #16]
								i++;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <TIM2_IRQHandler+0x28>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a03      	ldr	r2, [pc, #12]	; (80004ac <TIM2_IRQHandler+0x28>)
 80004a0:	6013      	str	r3, [r2, #0]

}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	2400001c 	.word	0x2400001c

080004b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	; (80004f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004de:	f000 f811 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e2:	f7ff ffc7 	bl	8000474 <main>

080004e6 <LoopForever>:

LoopForever:
    b LoopForever
 80004e6:	e7fe      	b.n	80004e6 <LoopForever>
  ldr   r0, =_estack
 80004e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80004ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80004f0:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80004f4:	0800056c 	.word	0x0800056c
  ldr r2, =_sbss
 80004f8:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80004fc:	24000020 	.word	0x24000020

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4d0d      	ldr	r5, [pc, #52]	; (800053c <__libc_init_array+0x38>)
 8000508:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <__libc_init_array+0x3c>)
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	2600      	movs	r6, #0
 8000510:	42a6      	cmp	r6, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	4d0b      	ldr	r5, [pc, #44]	; (8000544 <__libc_init_array+0x40>)
 8000516:	4c0c      	ldr	r4, [pc, #48]	; (8000548 <__libc_init_array+0x44>)
 8000518:	f000 f818 	bl	800054c <_init>
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	10a4      	asrs	r4, r4, #2
 8000520:	2600      	movs	r6, #0
 8000522:	42a6      	cmp	r6, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	3601      	adds	r6, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f855 3b04 	ldr.w	r3, [r5], #4
 8000536:	4798      	blx	r3
 8000538:	3601      	adds	r6, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000564 	.word	0x08000564
 8000540:	08000564 	.word	0x08000564
 8000544:	08000564 	.word	0x08000564
 8000548:	08000568 	.word	0x08000568

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
