
10_TIMER_TIM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000330  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005fc  08000604  00010604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005fc  080005fc  000105fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  00010604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  24000000  08000604  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400002c  08000604  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010604  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001e5b  00000000  00000000  00010632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000004b1  00000000  00000000  0001248d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000b8  00000000  00000000  00012940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000080  00000000  00000000  000129f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00000fec  00000000  00000000  00012a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000118e  00000000  00000000  00013a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d269d  00000000  00000000  00014bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000e728f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000188  00000000  00000000  000e72e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080005e4 	.word	0x080005e4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	080005e4 	.word	0x080005e4

0800030c <tim2_05HZ_init>:
#include "stm32h723xx.h"


void tim2_05HZ_init (void)
	{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
		/*Enable clock access to tim2 */
		RCC->APB1LENR |= (1U << 0);
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <tim2_05HZ_init+0x54>)
 8000312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <tim2_05HZ_init+0x54>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

		/*Clear Counter*/
		TIM2->CNT = 0;
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
		/*Set auto-reload value*/
		TIM2->ARR = (uint16_t) 39999;
 8000328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Set prescaler value*/
		TIM2->PSC = (uint16_t) 6249;
 8000332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000336:	f641 0269 	movw	r2, #6249	; 0x1869
 800033a:	629a      	str	r2, [r3, #40]	; 0x28
		/*Set auto-reload value*/
		TIM2->ARR = (uint16_t) 39999;
 800033c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000340:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Enable Timer*/
		TIM2->CR1 |= (1U << 0);
 8000346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6013      	str	r3, [r2, #0]
	}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	58024400 	.word	0x58024400

08000364 <uart_write>:
	uart_write((uint16_t) ch);
	return (ch);
}

void uart_write(uint16_t ch)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	/*Make sure the transmit data register is empty */
	while (!(USART3->ISR & TXE_SetR)){}
 800036e:	bf00      	nop
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <uart_write+0x2c>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0f9      	beq.n	8000370 <uart_write+0xc>

	/*Write to transmit data register*/
	USART3->TDR = (ch);
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <uart_write+0x2c>)
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40004800 	.word	0x40004800

08000394 <uart_tx_init>:

		return ( (char)(USART3->RDR) );
}

void uart_tx_init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
/**********Configure uart gpio pin************/
	/*Enable Clock access to GPIOD*/
	RCC->AHB4ENR |= GPIOD_EN;
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <uart_tx_init+0x90>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039e:	4a21      	ldr	r2, [pc, #132]	; (8000424 <uart_tx_init+0x90>)
 80003a0:	f043 0308 	orr.w	r3, r3, #8
 80003a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	/*Set PD8 to AF MODE*/
	GPIOD->MODER |= (1U<<17);
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <uart_tx_init+0x94>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <uart_tx_init+0x94>)
 80003ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~ (1U<<16);
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <uart_tx_init+0x94>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <uart_tx_init+0x94>)
 80003ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003be:	6013      	str	r3, [r2, #0]
	/*Set PD8 AF Type to UART_TX(AF7)*/
	GPIOD->AFR[1] |= (1U<<0);
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <uart_tx_init+0x94>)
 80003c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c4:	4a18      	ldr	r2, [pc, #96]	; (8000428 <uart_tx_init+0x94>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <uart_tx_init+0x94>)
 80003ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d0:	4a15      	ldr	r2, [pc, #84]	; (8000428 <uart_tx_init+0x94>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <uart_tx_init+0x94>)
 80003da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <uart_tx_init+0x94>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<3);
 80003e4:	4b10      	ldr	r3, [pc, #64]	; (8000428 <uart_tx_init+0x94>)
 80003e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e8:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <uart_tx_init+0x94>)
 80003ea:	f023 0308 	bic.w	r3, r3, #8
 80003ee:	6253      	str	r3, [r2, #36]	; 0x24

/*************Configure UART Module**********/
	/*Enable Clock access to UART3*/
	RCC->APB1LENR |= (1U<<18);
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <uart_tx_init+0x90>)
 80003f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <uart_tx_init+0x90>)
 80003f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	/*Configure Baudrate*/
	uart_set_br (USART3,SC,BaudRtSys);
 8000400:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000404:	4909      	ldr	r1, [pc, #36]	; (800042c <uart_tx_init+0x98>)
 8000406:	480a      	ldr	r0, [pc, #40]	; (8000430 <uart_tx_init+0x9c>)
 8000408:	f000 f814 	bl	8000434 <uart_set_br>
	//USART3->BRR= SC / BaudRtSys;
	/*Configure transfer direction*/
	USART3->CR1 = (1U<<3);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <uart_tx_init+0x9c>)
 800040e:	2208      	movs	r2, #8
 8000410:	601a      	str	r2, [r3, #0]
	/*Enable UART Module*/
	USART3->CR1 |= (1U<<0);
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <uart_tx_init+0x9c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a06      	ldr	r2, [pc, #24]	; (8000430 <uart_tx_init+0x9c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	58024400 	.word	0x58024400
 8000428:	58020c00 	.word	0x58020c00
 800042c:	03b9aca0 	.word	0x03b9aca0
 8000430:	40004800 	.word	0x40004800

08000434 <uart_set_br>:

static void uart_set_br (USART_TypeDef *USARTn,uint32_t PClock, uint32_t BRt)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
	USARTn->BRR = compute_uart_div(PClock,BRt);
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	68b8      	ldr	r0, [r7, #8]
 8000444:	f000 f808 	bl	8000458 <compute_uart_div>
 8000448:	4603      	mov	r3, r0
 800044a:	461a      	mov	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	60da      	str	r2, [r3, #12]
	}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <compute_uart_div>:
static uint16_t compute_uart_div( uint32_t PeriphClock, uint32_t BaudRt)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
	BR_Val = (PeriphClock + (BaudRt / 2U)) / BaudRt;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	085a      	lsrs	r2, r3, #1
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	441a      	add	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <compute_uart_div+0x30>)
 8000472:	6013      	str	r3, [r2, #0]
	return((uint16_t) BR_Val);
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <compute_uart_div+0x30>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	b29b      	uxth	r3, r3
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	24000020 	.word	0x24000020

0800048c <main>:
int i =0;
uint32_t ARR;
uint32_t PSC;

int main (void)
	{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
		RCC->AHB4ENR|=GPIOB_EN;
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <main+0xa4>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <main+0xa4>)
 8000498:	f043 0302 	orr.w	r3, r3, #2
 800049c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		RCC->AHB4ENR|=GPIOE_EN;
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <main+0xa4>)
 80004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a6:	4a22      	ldr	r2, [pc, #136]	; (8000530 <main+0xa4>)
 80004a8:	f043 0310 	orr.w	r3, r3, #16
 80004ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

		GPIOE->MODER &=~(1U<<3);
 80004b0:	4b20      	ldr	r3, [pc, #128]	; (8000534 <main+0xa8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1f      	ldr	r2, [pc, #124]	; (8000534 <main+0xa8>)
 80004b6:	f023 0308 	bic.w	r3, r3, #8
 80004ba:	6013      	str	r3, [r2, #0]
		GPIOB->MODER &=~(1U<<1);
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <main+0xac>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <main+0xac>)
 80004c2:	f023 0302 	bic.w	r3, r3, #2
 80004c6:	6013      	str	r3, [r2, #0]
		GPIOB->MODER &=~(1U<<29);
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <main+0xac>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <main+0xac>)
 80004ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80004d2:	6013      	str	r3, [r2, #0]


		tim2_05HZ_init ();
 80004d4:	f7ff ff1a 	bl	800030c <tim2_05HZ_init>
		PSC = TIM2->PSC;
 80004d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004de:	4a17      	ldr	r2, [pc, #92]	; (800053c <main+0xb0>)
 80004e0:	6013      	str	r3, [r2, #0]
		ARR= TIM2->ARR;
 80004e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	4a15      	ldr	r2, [pc, #84]	; (8000540 <main+0xb4>)
 80004ea:	6013      	str	r3, [r2, #0]

		uart_tx_init();
 80004ec:	f7ff ff52 	bl	8000394 <uart_tx_init>
		uart_write((uint16_t)'F');
 80004f0:	2046      	movs	r0, #70	; 0x46
 80004f2:	f7ff ff37 	bl	8000364 <uart_write>


		while (1)
		{	while ( ! (TIM2->SR & (1U << 0))){}
 80004f6:	bf00      	nop
 80004f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fc:	691b      	ldr	r3, [r3, #16]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f8      	beq.n	80004f8 <main+0x6c>
			i++;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0xb8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <main+0xb8>)
 800050e:	6013      	str	r3, [r2, #0]
			GPIOB->ODR ^=(1U<<14);
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0xac>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0xac>)
 8000516:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800051a:	6153      	str	r3, [r2, #20]

			TIM2->SR &=~ (1U << 0);
 800051c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000526:	f023 0301 	bic.w	r3, r3, #1
 800052a:	6113      	str	r3, [r2, #16]
		{	while ( ! (TIM2->SR & (1U << 0))){}
 800052c:	e7e3      	b.n	80004f6 <main+0x6a>
 800052e:	bf00      	nop
 8000530:	58024400 	.word	0x58024400
 8000534:	58021000 	.word	0x58021000
 8000538:	58020400 	.word	0x58020400
 800053c:	24000024 	.word	0x24000024
 8000540:	24000028 	.word	0x24000028
 8000544:	2400001c 	.word	0x2400001c

08000548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800054c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopForever+0x6>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <LoopForever+0xe>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <LoopForever+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000576:	f000 f811 	bl	800059c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057a:	f7ff ff87 	bl	800048c <main>

0800057e <LoopForever>:

LoopForever:
    b LoopForever
 800057e:	e7fe      	b.n	800057e <LoopForever>
  ldr   r0, =_estack
 8000580:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000584:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000588:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 800058c:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000590:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000594:	2400002c 	.word	0x2400002c

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <__libc_init_array>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4d0d      	ldr	r5, [pc, #52]	; (80005d4 <__libc_init_array+0x38>)
 80005a0:	4c0d      	ldr	r4, [pc, #52]	; (80005d8 <__libc_init_array+0x3c>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	2600      	movs	r6, #0
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d109      	bne.n	80005c0 <__libc_init_array+0x24>
 80005ac:	4d0b      	ldr	r5, [pc, #44]	; (80005dc <__libc_init_array+0x40>)
 80005ae:	4c0c      	ldr	r4, [pc, #48]	; (80005e0 <__libc_init_array+0x44>)
 80005b0:	f000 f818 	bl	80005e4 <_init>
 80005b4:	1b64      	subs	r4, r4, r5
 80005b6:	10a4      	asrs	r4, r4, #2
 80005b8:	2600      	movs	r6, #0
 80005ba:	42a6      	cmp	r6, r4
 80005bc:	d105      	bne.n	80005ca <__libc_init_array+0x2e>
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	3601      	adds	r6, #1
 80005c8:	e7ee      	b.n	80005a8 <__libc_init_array+0xc>
 80005ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ce:	4798      	blx	r3
 80005d0:	3601      	adds	r6, #1
 80005d2:	e7f2      	b.n	80005ba <__libc_init_array+0x1e>
 80005d4:	080005fc 	.word	0x080005fc
 80005d8:	080005fc 	.word	0x080005fc
 80005dc:	080005fc 	.word	0x080005fc
 80005e0:	08000600 	.word	0x08000600

080005e4 <_init>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr

080005f0 <_fini>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr
