
3_PushBotton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000178  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000000  0800044c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  0800044c  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000005d1  00000000  00000000  0001047a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000123  00000000  00000000  00010a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000048  00000000  00000000  00010b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000030  00000000  00000000  00010bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000236fe  00000000  00000000  00010be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000052f  00000000  00000000  000342e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ce1ac  00000000  00000000  00034815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001029c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000054  00000000  00000000  00102a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800042c 	.word	0x0800042c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	0800042c 	.word	0x0800042c

0800030c <main>:
#define GPIOC_EN 			(1U<<2)

#define PushB				(1U<<13) // equivalent Ã  un nbre binaire sur 32 bit avec 1 sur la pos 13
#define Button				PushB
int out = 0;
int main (void){
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
//Enabling Clock
RCC->AHB4ENR|=GPIOB_EN;
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0x74>)
 8000312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000316:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <main+0x74>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
RCC->AHB4ENR|=GPIOC_EN;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <main+0x74>)
 8000322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000326:	4a16      	ldr	r2, [pc, #88]	; (8000380 <main+0x74>)
 8000328:	f043 0304 	orr.w	r3, r3, #4
 800032c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
//Set Leds as outputs
GPIOB->MODER &=~(1U<<29);
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <main+0x78>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a13      	ldr	r2, [pc, #76]	; (8000384 <main+0x78>)
 8000336:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800033a:	6013      	str	r3, [r2, #0]

//Setting push button as input
GPIOC->MODER &=~(1U<<26);
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <main+0x7c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <main+0x7c>)
 8000342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000346:	6013      	str	r3, [r2, #0]
GPIOC->MODER &=~(1U<<27);
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <main+0x7c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <main+0x7c>)
 800034e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000352:	6013      	str	r3, [r2, #0]

while (1){
  if((GPIOC->IDR) & Button)
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <main+0x7c>)
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800035c:	2b00      	cmp	r3, #0
 800035e:	d004      	beq.n	800036a <main+0x5e>
	{GPIOB->BSRR =(1U<<14);}
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <main+0x78>)
 8000362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000366:	619a      	str	r2, [r3, #24]
 8000368:	e003      	b.n	8000372 <main+0x66>

  else
  {GPIOB->BSRR=(1U<<30);}
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <main+0x78>)
 800036c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000370:	619a      	str	r2, [r3, #24]
out = GPIOB->ODR;
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <main+0x78>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	461a      	mov	r2, r3
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <main+0x80>)
 800037a:	601a      	str	r2, [r3, #0]
  if((GPIOC->IDR) & Button)
 800037c:	e7ea      	b.n	8000354 <main+0x48>
 800037e:	bf00      	nop
 8000380:	58024400 	.word	0x58024400
 8000384:	58020400 	.word	0x58020400
 8000388:	58020800 	.word	0x58020800
 800038c:	2400001c 	.word	0x2400001c

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	; (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	; (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ffa3 	bl	800030c <main>

080003c6 <LoopForever>:

LoopForever:
    b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80003cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003d0:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80003dc:	24000020 	.word	0x24000020

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	; (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	; (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	; (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	; (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
