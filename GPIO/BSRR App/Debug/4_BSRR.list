
4_BSRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000000  08000470  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400001c  08000470  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
  9 .debug_info   000005f2  00000000  00000000  0001049e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000135  00000000  00000000  00010a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000048  00000000  00000000  00010bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000030  00000000  00000000  00010c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023716  00000000  00000000  00010c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000055e  00000000  00000000  00034356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ce21b  00000000  00000000  000348b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00102acf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000058  00000000  00000000  00102b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000450 	.word	0x08000450

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	08000450 	.word	0x08000450

0800030c <main>:
#define PIN3_R				(1U<<14)

#define LED_PIN_G 			PIN0_G
#define LED_PIN_R 			PIN3_R

int main (void){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
RCC->AHB4ENR|=GPIOB_EN;
 8000312:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <main+0x98>)
 8000314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000318:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <main+0x98>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
RCC->AHB4ENR|=GPIOE_EN;
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <main+0x98>)
 8000324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000328:	4a1e      	ldr	r2, [pc, #120]	; (80003a4 <main+0x98>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

GPIOE->MODER &=~(1U<<3);
 8000332:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <main+0x9c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <main+0x9c>)
 8000338:	f023 0308 	bic.w	r3, r3, #8
 800033c:	6013      	str	r3, [r2, #0]
GPIOB->MODER &=~(1U<<1);
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <main+0xa0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <main+0xa0>)
 8000344:	f023 0302 	bic.w	r3, r3, #2
 8000348:	6013      	str	r3, [r2, #0]
GPIOB->MODER &=~(1U<<29);
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <main+0xa0>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a17      	ldr	r2, [pc, #92]	; (80003ac <main+0xa0>)
 8000350:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000354:	6013      	str	r3, [r2, #0]
while (1){
	GPIOB->BSRR =(1U<<14);
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <main+0xa0>)
 8000358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800035c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR =(1U<<0);
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <main+0xa0>)
 8000360:	2201      	movs	r2, #1
 8000362:	619a      	str	r2, [r3, #24]
	for(int i=0; i<2000000; i++){}
 8000364:	2300      	movs	r3, #0
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	e002      	b.n	8000370 <main+0x64>
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3301      	adds	r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <main+0xa4>)
 8000374:	4293      	cmp	r3, r2
 8000376:	ddf8      	ble.n	800036a <main+0x5e>
	GPIOE->BSRR=(1U<<1);
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <main+0x9c>)
 800037a:	2202      	movs	r2, #2
 800037c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR=(1U<<30);
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0xa0>)
 8000380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000384:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR=(1U<<16);
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0xa0>)
 8000388:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800038c:	619a      	str	r2, [r3, #24]
	for(int i=0; i<2000000; i++){}
 800038e:	2300      	movs	r3, #0
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	e002      	b.n	800039a <main+0x8e>
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	3301      	adds	r3, #1
 8000398:	603b      	str	r3, [r7, #0]
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <main+0xa4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	ddf8      	ble.n	8000394 <main+0x88>
	GPIOB->BSRR =(1U<<14);
 80003a2:	e7d8      	b.n	8000356 <main+0x4a>
 80003a4:	58024400 	.word	0x58024400
 80003a8:	58021000 	.word	0x58021000
 80003ac:	58020400 	.word	0x58020400
 80003b0:	001e847f 	.word	0x001e847f

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 f811 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ff91 	bl	800030c <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003f4:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80003f8:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003fc:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000400:	2400001c 	.word	0x2400001c

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	4d0d      	ldr	r5, [pc, #52]	; (8000440 <__libc_init_array+0x38>)
 800040c:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 800040e:	1b64      	subs	r4, r4, r5
 8000410:	10a4      	asrs	r4, r4, #2
 8000412:	2600      	movs	r6, #0
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	4d0b      	ldr	r5, [pc, #44]	; (8000448 <__libc_init_array+0x40>)
 800041a:	4c0c      	ldr	r4, [pc, #48]	; (800044c <__libc_init_array+0x44>)
 800041c:	f000 f818 	bl	8000450 <_init>
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	2600      	movs	r6, #0
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
