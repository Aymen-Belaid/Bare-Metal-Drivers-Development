
11_OutputCompare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a0  080004a8  000104a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004a4  080004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  000104a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000000  080004a8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  080004a8  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001233  00000000  00000000  000104d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000002cd  00000000  00000000  00011709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000070  00000000  00000000  000119d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000048  00000000  00000000  00011a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00000edd  00000000  00000000  00011a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000c06  00000000  00000000  0001296d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d2553  00000000  00000000  00013573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000e5ac6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000a8  00000000  00000000  000e5b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000488 	.word	0x08000488

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	08000488 	.word	0x08000488

0800030c <tim3_PB0_Toggle>:
		/*Enable Timer*/
		TIM2->CR1 |= (1U << 0);
	}

void tim3_PB0_Toggle (void)
	{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

		/*Enable clock access to PB0 */
		RCC->AHB4ENR|= (1U << 1);
 8000310:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <tim3_PB0_Toggle+0xb8>)
 8000312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000316:	4a2b      	ldr	r2, [pc, #172]	; (80003c4 <tim3_PB0_Toggle+0xb8>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

		/*Set PB0 mode to alternate function mode*/
		GPIOB->MODER |= (1U << 1);
 8000320:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a28      	ldr	r2, [pc, #160]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6013      	str	r3, [r2, #0]
		GPIOB->MODER &=~ (1U << 0);
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000332:	f023 0301 	bic.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]

		/*Set Alternate function type to AF2 */
		GPIOB->AFR[0] |= (1U << 1);
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	6213      	str	r3, [r2, #32]
		GPIOB->AFR[0] &=~ (1U << 0);
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6213      	str	r3, [r2, #32]
		GPIOB->AFR[0] &=~ (1U << 2);
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000352:	6a1b      	ldr	r3, [r3, #32]
 8000354:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000356:	f023 0304 	bic.w	r3, r3, #4
 800035a:	6213      	str	r3, [r2, #32]
		GPIOB->AFR[0] &=~ (1U << 3);
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 800035e:	6a1b      	ldr	r3, [r3, #32]
 8000360:	4a19      	ldr	r2, [pc, #100]	; (80003c8 <tim3_PB0_Toggle+0xbc>)
 8000362:	f023 0308 	bic.w	r3, r3, #8
 8000366:	6213      	str	r3, [r2, #32]

		/*Enable clock access to tim3 */
		RCC->APB1LENR |= (1U << 1);
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <tim3_PB0_Toggle+0xb8>)
 800036a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800036e:	4a15      	ldr	r2, [pc, #84]	; (80003c4 <tim3_PB0_Toggle+0xb8>)
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

		/*Set auto-reload value*/
		TIM3->ARR = (uint16_t) 39999;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 800037a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Set prescaler value*/
		TIM3->PSC = (uint16_t) 6249;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 8000382:	f641 0269 	movw	r2, #6249	; 0x1869
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
		/*Set auto-reload value*/
		TIM3->ARR = (uint16_t) 39999;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 800038a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800038e:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Set Output Compare toggle mode*/
		TIM3->CCMR2 |= (1U << 4) | (1U << 5);
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 8000396:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800039a:	61d3      	str	r3, [r2, #28]
		//TIM3->CCMR2 &=~ (1U << 6) | (1U << 16);

		/*Enable tim3 ch1 in compare mode*/
		TIM3->CCER |= (1U << 8);
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 800039e:	6a1b      	ldr	r3, [r3, #32]
 80003a0:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 80003a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a6:	6213      	str	r3, [r2, #32]

		/*Clear Counter*/
		TIM3->CNT = 0;
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24

		/*Enable Timer*/
		TIM3->CR1 |= (1U << 0);
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <tim3_PB0_Toggle+0xc0>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]
	}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	58024400 	.word	0x58024400
 80003c8:	58020400 	.word	0x58020400
 80003cc:	40000400 	.word	0x40000400

080003d0 <main>:
int i =0;
uint32_t ARR;
uint32_t PSC;

int main (void)
	{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0


		tim3_PB0_Toggle();
 80003d4:	f7ff ff9a 	bl	800030c <tim3_PB0_Toggle>


		while (1)
		{
			OUT= GPIOB->ODR;
 80003d8:	4b02      	ldr	r3, [pc, #8]	; (80003e4 <main+0x14>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <main+0x18>)
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	e7f9      	b.n	80003d8 <main+0x8>
 80003e4:	58020400 	.word	0x58020400
 80003e8:	2400001c 	.word	0x2400001c

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 f811 	bl	8000440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff ffd7 	bl	80003d0 <main>

08000422 <LoopForever>:

LoopForever:
    b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000428:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800042c:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000430:	080004a8 	.word	0x080004a8
  ldr r2, =_sbss
 8000434:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000438:	24000020 	.word	0x24000020

0800043c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC1_2_IRQHandler>
	...

08000440 <__libc_init_array>:
 8000440:	b570      	push	{r4, r5, r6, lr}
 8000442:	4d0d      	ldr	r5, [pc, #52]	; (8000478 <__libc_init_array+0x38>)
 8000444:	4c0d      	ldr	r4, [pc, #52]	; (800047c <__libc_init_array+0x3c>)
 8000446:	1b64      	subs	r4, r4, r5
 8000448:	10a4      	asrs	r4, r4, #2
 800044a:	2600      	movs	r6, #0
 800044c:	42a6      	cmp	r6, r4
 800044e:	d109      	bne.n	8000464 <__libc_init_array+0x24>
 8000450:	4d0b      	ldr	r5, [pc, #44]	; (8000480 <__libc_init_array+0x40>)
 8000452:	4c0c      	ldr	r4, [pc, #48]	; (8000484 <__libc_init_array+0x44>)
 8000454:	f000 f818 	bl	8000488 <_init>
 8000458:	1b64      	subs	r4, r4, r5
 800045a:	10a4      	asrs	r4, r4, #2
 800045c:	2600      	movs	r6, #0
 800045e:	42a6      	cmp	r6, r4
 8000460:	d105      	bne.n	800046e <__libc_init_array+0x2e>
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	f855 3b04 	ldr.w	r3, [r5], #4
 8000468:	4798      	blx	r3
 800046a:	3601      	adds	r6, #1
 800046c:	e7ee      	b.n	800044c <__libc_init_array+0xc>
 800046e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000472:	4798      	blx	r3
 8000474:	3601      	adds	r6, #1
 8000476:	e7f2      	b.n	800045e <__libc_init_array+0x1e>
 8000478:	080004a0 	.word	0x080004a0
 800047c:	080004a0 	.word	0x080004a0
 8000480:	080004a0 	.word	0x080004a0
 8000484:	080004a4 	.word	0x080004a4

08000488 <_init>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr

08000494 <_fini>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr
